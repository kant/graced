package gui.view.model;

import javafx.beans.property.BooleanProperty;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;




/**
 * Abstract class to represent the basic content of a type. It cannot be instantiated,
 * and needs to be used through TypeDimension or TypeCriterion, depending on which one
 * is needed on each case.
 * 
 * @author Ing. Melina C. Vidoni - 2015
 *
 */
public abstract class Type {
	protected IntegerProperty level;
	protected StringProperty name;
	protected BooleanProperty usable;
	protected StringProperty description;	
	
	
	/**
	 * Default constructor of the class.
	 * @param l Level of the criterion node.
	 * @param n Name of the criterion node.
	 * @param d Description of the criterion node.
	 * @param u If the type is usable
	 */
	public Type(int l, String n, String d, Boolean u) {
		level = new SimpleIntegerProperty(l);
		name = new SimpleStringProperty(n);
		description = new SimpleStringProperty(d);
		usable = new SimpleBooleanProperty(u);
	}


	/**
	 * @return the name
	 */
	public String getName() {
		return name.get();
	}


	/**
	 * @param name the name to set
	 */
	public void setName(String n) {
		name.set(n);
	}


	/**
	 * @return the usable
	 */
	public boolean getUsable() {
		return usable.get();
	}


	/**
	 * @param usable the usable to set
	 */
	public void setUsable(String u) {
		usable.set(u);
	}


	/**
	 * @return the description
	 */
	public String getDescription() {
		return description.get();
	}


	/**
	 * @param description the description to set
	 */
	public void setDescription(String d) {
		description.set(d);
	}


	/**
	 * @return the level
	 */
	public int getLevel() {
		return level.get();
	}


	/**
	 * @param level the level to set
	 */
	public void setLevel(int l) {
		level.set(l);
	}
}
