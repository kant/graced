package gui.view.model;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.PieChart.Data;
import javafx.scene.chart.XYChart;




/**
 * Class that contains the model for the actors batchart named
 * proportion model. It contains the list of actors, and the quantity
 * of functional and non functional requirements they listed.
 * 
 * @author Ing. Melina C. Vidoni - 2015.
 *
 */
public class ARProportionModel {
	private ObservableList<String> actors;
	private ObservableList<Integer> frReqs;
	private ObservableList<Integer> nfrReqs;
	
	
	
	/**
	 * Public constructor of the class
	 */
	public ARProportionModel() {
		// Create empty lists
		actors = FXCollections.<String>observableArrayList();
		frReqs = FXCollections.<Integer>observableArrayList();
		nfrReqs = FXCollections.<Integer>observableArrayList();
	}
	
	
	
	/**
	 * Method to initialize the data of the model with the name of
	 * the actors and all values set to zero.
	 */
	public void initData() {
		// Add the actors
		actors.addAll( ProjectModel.getInstance().getActorsCombo() );
		
		// For the size of actors...
		for(int i=0; i<actors.size(); i++) {
			// Set values to zero
			frReqs.add(0);
			nfrReqs.add(0);
		}
	}

	
	
	/**
	 * This method should load all the data about the requirements
	 * into the model.
	 */
	public void loadData() {
		// For each requirement on the project model
		for(Requirements r : ProjectModel.getInstance().getReqsTableModel() ) {
			// Prepare an index
			int index = -1;
			
			// Fin the actor for this requirement
			for(String a : actors) {
				// Get the name splitted
				String id = a.split(": ")[0];
				
				// If this is the actor
				if( id.equals( r.getActor().getId() ) ) {
					// Save the index
					index = actors.indexOf(a);
					break;
				}
			}
			
			// Now if the requirement is FR
			if( r.getIsFR() ) {
				// Increase value in FR
				frReqs.set(index, frReqs.get(index)+1 );
			}
			// If not, then it is NFR
			else {
				// Increase the value in NFR
				nfrReqs.set(index, nfrReqs.get(index)+1 );
			}	
		}
	}
	
	
	
	/**
	 * Method to check if the model is empty
	 * @return @true if the model is empty, @false in the other case
	 */
	public boolean isEmpty() {
		// Go through the counting
		for(int i=0; i<actors.size(); i++) {
			// If either FR or NFR is differet than zero
			if( frReqs.get(i)!=0 || nfrReqs.get(i)!=0 ) {
				// Return false and cut the loop
				return false;
			}
		}
		
		// If we reached it here, then return true
		return true;
	}
	
	
	
	
	/**
	 * Method to get the information of the model converted into the format
	 * required to be used in the barchart.
	 * @return An observable list of the two series of the chart.
	 */
	public ObservableList<XYChart.Series<String, Integer>> getBarchartSeries() {
		// Create the list
		ObservableList<XYChart.Series<String, Integer>> seriesList =
				FXCollections.<XYChart.Series<String, Integer>>observableArrayList();
		
		// Create FR series
		XYChart.Series<String, Integer> frSeries = new XYChart.Series<String, Integer>();
		frSeries.setName("Functional Requirements");
		
		// Create NFR series
		XYChart.Series<String, Integer> nfrSeries = new XYChart.Series<String, Integer>();
		nfrSeries.setName("Non Functional Requirements");
		
		// Add items to series
		for(int i=0; i<actors.size(); i++) {
			// Add to the FR series
			frSeries.getData().add( new XYChart.Data<String, Integer>(actors.get(i), frReqs.get(i)) );
			
			// Add to the NFR series
			nfrSeries.getData().add( new XYChart.Data<String, Integer>(actors.get(i), nfrReqs.get(i)) );
		}
		
		// Add the series to the list
		seriesList.add(frSeries);
		seriesList.add(nfrSeries);
		
		// Return the data
		return seriesList;
	}


	
	

	public PieChart.Data getPieData() {
		// Create to ints
		int frQty = 0;
		int nfrQty = 0;
		
		// Now go counting...
		for(int i=0; i<actors.size(); i++) {
			// Add to each counting
			frQty += frReqs.get(i);
			nfrQty += nfrReqs.get(i);
		}
	}
	

	
	
	
}
