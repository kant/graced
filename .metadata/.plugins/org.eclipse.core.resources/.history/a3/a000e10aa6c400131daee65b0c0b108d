package xmlfiles;

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;

import javafx.scene.control.TreeItem;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

import database.objects.Category;
import database.objects.ColumnName;
import database.objects.TableName;





/**
 * A class that works as a XML writer, that saves all the information of the classification
 * process into the mandatory predefined XML files.
 * @author Ing. Melina C. Vidoni - 2014
 *
 */
public class XMLWriter {
	private static String UNCLASS_FILE = "files/results/UnclassifiedTables.xml";
	private static String CLASS_FILE = "files/results/ClassifiedTables.xml";
	private static String TYPE_FILE = "files/results/ResultsTypes.xml";

	
	
	
	
	/**
	 * A method for writing an XML file with the resulting separating of the classifications on
	 * the three types: tricky, true and neutral. This must be called after the results has been
	 * calculated by @see ResultsGenerator.
	 * @throws ParserConfigurationException
	 * @throws TransformerException
	 */
	public static void writeTypesXML() throws ParserConfigurationException, TransformerException {
		// Get a reader
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		

		// Make root element
		Document doc = docBuilder.newDocument();
		Element rootElem = doc.createElement( ResultsTypesLabels.ROOT.getLabel() );
			rootElem.setAttribute("xmlns:tns", "http://www.example.org/ResultsTypesSchema");
			rootElem.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
			rootElem.setAttribute("xsi:schemaLocation", "http://www.example.org/ResultsTypesSchema ResultsTypesSchema.xsd ");
			rootElem.setAttribute(ResultsTypesLabels.TOTAL_QTY.getLabel(), 
						Integer.toString(ResultsGenerator.getTotalClassification()) );
		
		doc.appendChild(rootElem);
		
		
		/*
		 * TRICKY TYPE
		 */
		Element trickyElem =  doc.createElement( ResultsTypesLabels.TYPES_TYPE.getLabel() );
			trickyElem.setAttribute( ResultsTypesLabels.TYPE_NAME.getLabel() , "Tricky");
		
		// Get the root
		TreeItem<String> rootTricky = ResultsGenerator.getTypesTreeRoot("Tricky");
		
		// For each item on the tree
		for(TreeItem<String> ti : rootTricky.getChildren() ) {
			// Create a new element
			Element tableElem = doc.createElement( ResultsTypesLabels.TABLE_TYPE.getLabel() );
			tableElem.setAttribute( ResultsTypesLabels.TABLE_NAME.getLabel() , ti.getValue() );
				
			// Add all the classification
			for(TreeItem<String> ci : ti.getChildren() ) {
				// Create the new element
				Element catElem = doc.createElement( ResultsTypesLabels.CATEGORY_TYPE.getLabel() );
				catElem.setAttribute( ResultsTypesLabels.CATEGORY_NAME.getLabel() , ci.getValue() );
				
				// Add it to the table
				tableElem.appendChild( catElem );
			}
			
			// Add it to the tricky part
			trickyElem.appendChild( tableElem );
		}
		
		// Add the type to the root
		rootElem.appendChild( trickyElem );

		
		
		/*
		 * TRUE TYPE
		 */
		Element trueElem =  doc.createElement( ResultsTypesLabels.TYPES_TYPE.getLabel() );
		trueElem.setAttribute( ResultsTypesLabels.TYPE_NAME.getLabel() , "True");
		
		// Get the root
		TreeItem<String> rootTrue = ResultsGenerator.getTypesTreeRoot("True");
		
		// For each item on the tree
		for(TreeItem<String> ti : rootTrue.getChildren() ) {
			// Create a new element
			Element tableElem = doc.createElement( ResultsTypesLabels.TABLE_TYPE.getLabel() );
			tableElem.setAttribute( ResultsTypesLabels.TABLE_NAME.getLabel() , ti.getValue() );
				
			// Add all the classification
			for(TreeItem<String> ci : ti.getChildren() ) {
				// Create the new element
				Element catElem = doc.createElement( ResultsTypesLabels.CATEGORY_TYPE.getLabel() );
				catElem.setAttribute( ResultsTypesLabels.CATEGORY_NAME.getLabel() , ci.getValue() );
				
				// Add it to the table
				tableElem.appendChild( catElem );
			}
			
			// Add it to the tricky part
			trueElem.appendChild( tableElem );
		}
		
		// Add the type to the root
		rootElem.appendChild( trueElem );
		
		

		/*
		 * NEUTRAL TYPE
		 */
		Element neutralElem =  doc.createElement( ResultsTypesLabels.TYPES_TYPE.getLabel() );
		neutralElem.setAttribute( ResultsTypesLabels.TYPE_NAME.getLabel() , "Neutral");
		
		// Get the root
		TreeItem<String> rootNeutral = ResultsGenerator.getTypesTreeRoot("Neutral");
		
		// For each item on the tree
		for(TreeItem<String> ti : rootNeutral.getChildren() ) {
			// Create a new element
			Element tableElem = doc.createElement( ResultsTypesLabels.TABLE_TYPE.getLabel() );
			tableElem.setAttribute( ResultsTypesLabels.TABLE_NAME.getLabel() , ti.getValue() );
				
			// Add all the classification
			for(TreeItem<String> ci : ti.getChildren() ) {
				// Create the new element
				Element catElem = doc.createElement( ResultsTypesLabels.CATEGORY_TYPE.getLabel() );
				catElem.setAttribute( ResultsTypesLabels.CATEGORY_NAME.getLabel() , ci.getValue() );
				
				// Add it to the table
				tableElem.appendChild( catElem );
			}
			
			// Add it to the tricky part
			neutralElem.appendChild( tableElem );
		}
		
		// Add the type to the root
		rootElem.appendChild( neutralElem );
		
		

		
		
		// Prepare source and result
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File( TYPE_FILE ));
 
		// Transform
		transformer.transform(source, result);
		
		
	}
	
	
	
	
	/**
	 * Method that saves the information of classified tables into a predefined
	 * XML file, that will be later used on the graphics generation.
	 * @param currentT The current tablename.
	 * @param list The list with temporal classification.
	 * @throws SAXException
	 * @throws IOException
	 * @throws ParserConfigurationException
	 * @throws TransformerException
	 */
	public static void saveClassifiedTable(TableName currentT, LinkedList<Category> list) throws SAXException, IOException, ParserConfigurationException, TransformerException {
		File classFile = new File( CLASS_FILE );
		
		// Create the file
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		Document doc = dbFactory.newDocumentBuilder().parse( classFile );
		
		// Get the root element
		Element rootNode = doc.getDocumentElement();
		
		/*
		 * WRITE
		 */
		// Create te element of the table
		Element table = doc.createElement( CatTablesLabels.TABLE.getLabel() );
			table.setAttribute( CatTablesLabels.TABLENAME.getLabel() , currentT.getName() );
		
			
		// For each category
		for( Category c : list ) {	
			// Create class element
			Element classEl = doc.createElement( CatTablesLabels.CLASS.getLabel() );
				classEl.setAttribute( CatTablesLabels.CLASS_NAME.getLabel() , c.getTableCategory() );
			
			// Create tablename category
			Element tableClass = doc.createElement( CatTablesLabels.TABLE_CLASS.getLabel() );
				tableClass.setAttribute( CatTablesLabels.CLASS_PERCENT.getLabel() , Double.toString( c.getTableCategoryPercentage() ) );
				classEl.appendChild(tableClass);
				
			// Create column name category
			Element columnClass = doc.createElement( CatTablesLabels.COLUMN_CLASS.getLabel() );
				columnClass.setAttribute( CatTablesLabels.CLASS_PERCENT.getLabel() , Double.toString( c.getColumnCategoryPercentage() ) );
				classEl.appendChild(columnClass);
				
			// Append the class
			table.appendChild(classEl);
		}
		
		
		//For each columname
		for( ColumnName cn : currentT.getColumnames() ) {
			// Create the element
			Element elemCol = doc.createElement( CatTablesLabels.COLUMN.getLabel() );
				elemCol.setAttribute( CatTablesLabels.COLUMN_NAME.getLabel() , cn.getName() );
			
			// Add it to the table
			table.appendChild(elemCol);
		}
	
		// Add to the root
		rootNode.appendChild(table);
		
		
		// Prepare for the transformation...
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult( classFile );
 
		// Transform the file
		transformer.transform(source, result);
	}
	
	
	
	
	
	
	
	
	/**
	 * Method that saves the information of not classified tables into a predefined
	 * XML file, that will be later used on the graphics generation.
	 * @param name The name of the table to save in this file.
	 * @throws TransformerException
	 * @throws SAXException
	 * @throws IOException
	 * @throws ParserConfigurationException
	 */
	public static void saveUnclassifiedTable(String name) throws TransformerException, SAXException, IOException, ParserConfigurationException {
		File unclassFile = new File( UNCLASS_FILE );
		
		// Create the file
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		Document doc = dbFactory.newDocumentBuilder().parse( unclassFile );
		
		// Get the root element
		Element rootNode = doc.getDocumentElement();
 
		// Create te element of the table
		Element table = doc.createElement( UncatTablesLabels.TABLE.getLabel() );
		table.setAttribute(UncatTablesLabels.TABLENAME.getLabel(), name);
		
		// Add the element to the root
		rootNode.appendChild( table );
		
		
		// Prepare for the transformation...
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		transformer.setOutputProperty(OutputKeys.INDENT, "yes");
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult( unclassFile );
 
		// Transform the file
		transformer.transform(source, result);
	}




	
	/**
	 * Method that creates the raw files where the classification results are going to be added.
	 * @throws ParserConfigurationException
	 * @throws TransformerException
	 */
	public static void createFiles() throws ParserConfigurationException, TransformerException {
		// Get a reader
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		

		/*
		 * UNCLASSIFIED TABLES FILES
		 */
		// Make root element
		Document docUnclass = docBuilder.newDocument();
		Element rootElementUnclass = docUnclass.createElement( UncatTablesLabels.ROOT.getLabel() );
			rootElementUnclass.setAttribute("xmlns:tns", "http://www.example.org/BagOfWordsSchema");
			rootElementUnclass.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
			rootElementUnclass.setAttribute("xsi:schemaLocation", "http://www.example.org/UnclassifiedTablesSchema ../results/UnclassifiedTablesSchema.xsd ");
		
		
		docUnclass.appendChild(rootElementUnclass);
		
		// Prepare source and result
		DOMSource sourceUnclass = new DOMSource(docUnclass);
		StreamResult resultUnclass = new StreamResult(new File( UNCLASS_FILE ));
 
		// Transform
		transformer.transform(sourceUnclass, resultUnclass);
		
		
		
		/*
		 * CLASSIFIED TABLES FILES
		 */
		// Make root element
		Document docClass = docBuilder.newDocument();
		Element rootElementClass = docClass.createElement( UncatTablesLabels.ROOT.getLabel() );
			rootElementClass.setAttribute("xmlns:tns", "http://www.example.org/BagOfWordsSchema");
			rootElementClass.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
			rootElementClass.setAttribute("xsi:schemaLocation", "http://www.example.org/ClassifiedTablesSchema ../results/ClassifiedTablesSchema.xsd ");

		docClass.appendChild(rootElementClass);
		
		// Prepare source and result
		DOMSource sourceClass = new DOMSource(docClass);
		StreamResult resultClass = new StreamResult(new File( CLASS_FILE ));
 
		// Transform
		transformer.transform(sourceClass, resultClass);
	}









	
	
	








	
	
	
}
